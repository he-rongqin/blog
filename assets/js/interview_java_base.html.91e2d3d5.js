"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5370],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},5291:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>t});var n=a(641);const l={},e=(0,a(6262).A)(l,[["render",function(i,s){const a=(0,n.g2)("Mermaid");return(0,n.uX)(),(0,n.CE)("div",null,[s[0]||(s[0]=(0,n.Fv)('<h2 id="一、面向对象" tabindex="-1"><a class="header-anchor" href="#一、面向对象"><span>一、面向对象</span></a></h2><h3 id="_1-1-面向对象三大特性" tabindex="-1"><a class="header-anchor" href="#_1-1-面向对象三大特性"><span>1.1 面向对象三大特性</span></a></h3><h4 id="q1-封装的意义及实现方式" tabindex="-1"><a class="header-anchor" href="#q1-封装的意义及实现方式"><span>Q1：封装的意义及实现方式？</span></a></h4><p><strong>答案</strong>：</p><ul><li><strong>核心思想</strong>：隐藏对象内部细节，对外暴露安全访问接口</li><li><strong>实现方式</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 私有化属性</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 提供公共访问方法</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name; }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用场景：</strong></p><ul><li><p>DTO数据传输对象设计</p></li><li><p>模块接口定义</p></li><li><p>敏感数据保护</p></li></ul><p><strong>Q2：多态的实现原理？</strong></p><p><strong>答案：</strong></p><p><strong>技术实现：</strong></p><ul><li>方法重写（Override）</li><li>向上转型（父类引用指向子类对象）</li><li>动态绑定（运行时确定具体方法）</li></ul><p><strong>JVM实现机制：</strong></p>',13)),(0,n.bF)(a,{id:"mermaid-74",code:"eJxLzkksLnbJTEwvSszlUgACsICCY15mbmKOQjVYCAS0y/IzUxRSE0s0NLXAgrVIql3y07ErxVDpnFhCUCXUbpsaXV2QyRhiQDO4AGK9Lu4="}),s[1]||(s[1]=(0,n.Lk)("h2",{id:"二、集合框架",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#二、集合框架"},[(0,n.Lk)("span",null,"二、集合框架")])],-1)),s[2]||(s[2]=(0,n.Lk)("h3",{id:"_2-1-hashmap深度解析",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#_2-1-hashmap深度解析"},[(0,n.Lk)("span",null,"2.1 HashMap深度解析")])],-1)),s[3]||(s[3]=(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,"Q3：HashMap的put方法执行流程？")],-1)),s[4]||(s[4]=(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,"答案：")],-1)),(0,n.bF)(a,{id:"mermaid-87",code:"eJxLL0osyFAIceFSAALH6BfrFj5fNz07tfL5rJaMxOKMpw17YhV0de0UnKKfL1z3dN2sZwu3Pdnb+3zvuliwDiewpHM1UPjZjPVPJyx7smPX85W77GvBss4g2RqgRI2CS/Tz2Vue9S191j/paevSZ9M2vOhqet60E2IKRB1Qd42Ca/TLxt6nfW0vJ+97sXCF/vNdi17unvhswUSIQlewdW7VT9fOeDpnxfPZO55O6AE6FmqdG8I69+hns/c/611UlphTmgryBJICsD0e0U837HvZvAKrezzA1nhWQxzxcur+p7uW2VlAbfFE2OIV/WLvGqAtIE+jOhSiCGyTd/Tz3Vue9TRCDHu+e/KzeS2xXAAQH7Zu"}),s[5]||(s[5]=(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,"Q4：ConcurrentHashMap线程安全实现演进？")],-1)),s[6]||(s[6]=(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,"版本对比：")],-1))])}]]),t=JSON.parse('{"path":"/interview/java/base.html","title":"Java 基础","lang":"zh-CN","frontmatter":{"title":"Java 基础","editLink":false,"date":"2025-03-05T00:00:00.000Z","order":1,"category":["面试资料"],"description":"一、面向对象 1.1 面向对象三大特性 Q1：封装的意义及实现方式？ 答案： 核心思想：隐藏对象内部细节，对外暴露安全访问接口 实现方式： 应用场景： DTO数据传输对象设计 模块接口定义 敏感数据保护 Q2：多态的实现原理？ 答案： 技术实现： 方法重写（Override） 向上转型（父类引用指向子类对象） 动态绑定（运行时确定具体方法） JVM实现...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/interview/java/base.html"}],["meta",{"property":"og:site_name","content":"路遥"}],["meta",{"property":"og:title","content":"Java 基础"}],["meta",{"property":"og:description","content":"一、面向对象 1.1 面向对象三大特性 Q1：封装的意义及实现方式？ 答案： 核心思想：隐藏对象内部细节，对外暴露安全访问接口 实现方式： 应用场景： DTO数据传输对象设计 模块接口定义 敏感数据保护 Q2：多态的实现原理？ 答案： 技术实现： 方法重写（Override） 向上转型（父类引用指向子类对象） 动态绑定（运行时确定具体方法） JVM实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-05T09:48:32.000Z"}],["meta",{"property":"article:published_time","content":"2025-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-05T09:48:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-05T09:48:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeRongqin\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、面向对象","slug":"一、面向对象","link":"#一、面向对象","children":[{"level":3,"title":"1.1 面向对象三大特性","slug":"_1-1-面向对象三大特性","link":"#_1-1-面向对象三大特性","children":[]}]},{"level":2,"title":"二、集合框架","slug":"二、集合框架","link":"#二、集合框架","children":[{"level":3,"title":"2.1 HashMap深度解析","slug":"_2-1-hashmap深度解析","link":"#_2-1-hashmap深度解析","children":[]}]}],"git":{"createdTime":1741168112000,"updatedTime":1741168112000,"contributors":[{"name":"rongqin.he","email":"2012465448@qq.com","commits":1}]},"readingTime":{"minutes":1.13,"words":339},"filePathRelative":"interview/java/base.md","localizedDate":"2025年3月5日","excerpt":"<h2>一、面向对象</h2>\\n<h3>1.1 面向对象三大特性</h3>\\n<h4>Q1：封装的意义及实现方式？</h4>\\n<p><strong>答案</strong>：</p>\\n<ul>\\n<li><strong>核心思想</strong>：隐藏对象内部细节，对外暴露安全访问接口</li>\\n<li><strong>实现方式</strong>：</li>\\n</ul>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Person</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">      // 私有化属性</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">      private</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> String</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">      </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">      // 提供公共访问方法</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">      public</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> String</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> getName</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">return</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> name; }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">      public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> setName</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">String</span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\"> name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> { </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">          if</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(name </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">!=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> null</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">this</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> name;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">      }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  }</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);