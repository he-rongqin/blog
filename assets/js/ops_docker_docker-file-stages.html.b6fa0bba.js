"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5039],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},6588:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>t});var e=a(641);const n={},l=(0,a(6262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h2 id="场景描述" tabindex="-1"><a class="header-anchor" href="#场景描述"><span>场景描述</span></a></h2><p>在<code>CI/CD</code>的场景下，从代码提交合并到自动打包构建，会分好几个阶段，例如：<code>git push</code> -&gt; <code>代码规范检查</code> -&gt; <code>sonar 扫描</code> -&gt; <code>maven 打包</code> --&gt; <code>docker 打包镜像</code> -&gt; <code>docker push harbor</code>。在这里如果自动触发构建不做过多赘述（Jenkins内容，感兴趣的自行了解），这里只做<code>Dockerfile</code> 分阶段构建镜像的说明。</p><p>举个例子：现在需要将开发提交的<code>portal-gateway</code>代码打包成一个<code>docker 镜像</code>。</p><p>常规情况下，分两步：</p><ul><li>源码通过maven ：<code>mvn clean package</code>编译为jar包。</li><li>将这个jar 构建成一个docker 镜像，发布的时候运行这个镜像即可。</li></ul><p>现在，通过dockerfile的分阶段构建完成这两步。</p><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># maven 项目源码结构</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tree</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dockerfile</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> README.md</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|   |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application.yaml</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|   </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bootstrap.yaml</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pom.xml</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 两个docker 基础镜像</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> images</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">REPOSITORY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        TAG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                               IMAGE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       CREATED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        SIZE</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eclipse-temurin</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   17.0.14_7-jdk-alpine-3.21</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         51e074d8dc1a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> weeks</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ago</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    332MB</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maven</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             3.9.9-eclipse-temurin-17-alpine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   1810170af99d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> months</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ago</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   351MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一个 maven 项目结构，项目名称（按实际情况）：<code>portal-gateway</code></li><li>一个同级目录下<code>Dockerfile</code>文件</li><li>两个docker基础镜像，分别是：<code>maven:3.9.9-eclipse-temurin-17-alpine</code>、<code>eclipse-temurin:17.0.14_7-jdk-alpine-3.21</code></li></ul><p><em>Note:</em></p><blockquote><p>我们拿到的是未编译的源码，要经过maven进行编译打包后，才能根据这个jar打包构建发布，所以需要maven基础镜像镜像编译打包，需要jdk运行这个jar应用。</p></blockquote><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h2><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 第一阶段，使用maven进行构建打包</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maven:3.9.9-eclipse-temurin-17-alpine </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> builder</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 工作目录</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /home/builder</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 复制源码</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> src src</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pom.xml pom.xml</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># maven构建</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mvn clean package</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 第二阶段，根据第一阶段打的包，构建镜像</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> eclipse-temurin:17.0.14_7-jdk-alpine-3.21 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> deploy</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /home/app</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 从第一阶段拿到的jar进行构建</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=builder /home/builder/target/portal-gateway-2.0.1-SNAPSHOT.jar ./app.jar</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> config/ config/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TZ=Asia/Shanghai</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    echo $TZ &gt; /etc/timezone</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 8080</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> java ${JAVA_OPTS} -jar  app.jar ${JAVA_CLI}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Note：</em></p><ul><li><em>关键点1：FROM AS，将某一个阶段通过AS关键字命名</em></li><li><em>关键点2：COPY --from=builder，复制某个阶段的产物（不是宿主机）</em></li></ul><p><em>这里只是描述两个阶段而已，无论多少个阶段，逻辑是一样的，无非是 <code>AS</code> 阶段，然后取某个阶段的产物</em></p><h2 id="构建镜像-启动容器" tabindex="-1"><a class="header-anchor" href="#构建镜像-启动容器"><span>构建镜像&amp;启动容器</span></a></h2><p>构建镜像</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gateway:v1.0.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Note：</em></p><ul><li><code>-t</code>， 表示需要为镜像打<code>tag</code>（版本号）- <code>v1.0.0-test</code></li><li><code>.</code> 表示使用当前目录下的Dockerfile文件进行构建镜像（当然也可以通过<code>-f [path]</code>指定其他目录下的Dockerfile <a href="https://www.runoob.com/docker/docker-build-command.html" target="_blank" rel="noopener noreferrer">参考</a>）</li></ul><p>启动容器</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JAVA_OPTS=-Xms</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 128m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 256m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JAVA_CLI=--spring.profiles.active=dev</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo:v1.0.0-test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li>https://docs.docker.com/reference/dockerfile/</li><li>https://www.runoob.com/docker/docker-build-command.html</li></ul>',25)]))}]]),t=JSON.parse('{"path":"/ops/docker/docker-file-stages.html","title":"Dockerfile 分阶段构建","lang":"zh-CN","frontmatter":{"title":"Dockerfile 分阶段构建","date":"2025-03-19T00:00:00.000Z","editLink":false,"category":["运维"],"tag":["Docker","Dockerfile"],"description":"场景描述 在CI/CD的场景下，从代码提交合并到自动打包构建，会分好几个阶段，例如：git push -> 代码规范检查 -> sonar 扫描 -> maven 打包 --\x3e docker 打包镜像 -> docker push harbor。在这里如果自动触发构建不做过多赘述（Jenkins内容，感兴趣的自行了解），这里只做Dockerfile 分...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/ops/docker/docker-file-stages.html"}],["meta",{"property":"og:site_name","content":"路遥"}],["meta",{"property":"og:title","content":"Dockerfile 分阶段构建"}],["meta",{"property":"og:description","content":"场景描述 在CI/CD的场景下，从代码提交合并到自动打包构建，会分好几个阶段，例如：git push -> 代码规范检查 -> sonar 扫描 -> maven 打包 --\x3e docker 打包镜像 -> docker push harbor。在这里如果自动触发构建不做过多赘述（Jenkins内容，感兴趣的自行了解），这里只做Dockerfile 分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-19T07:24:44.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"Dockerfile"}],["meta",{"property":"article:published_time","content":"2025-03-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-19T07:24:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile 分阶段构建\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-19T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-19T07:24:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeRongqin\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"场景描述","slug":"场景描述","link":"#场景描述","children":[]},{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":2,"title":"Dockerfile","slug":"dockerfile","link":"#dockerfile","children":[]},{"level":2,"title":"构建镜像&启动容器","slug":"构建镜像-启动容器","link":"#构建镜像-启动容器","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1742369084000,"updatedTime":1742369084000,"contributors":[{"name":"rongqin.he","email":"2012465448@qq.com","commits":1}]},"readingTime":{"minutes":2.3,"words":690},"filePathRelative":"ops/docker/docker-file-stages.md","localizedDate":"2025年3月19日","excerpt":"<h2>场景描述</h2>\\n<p>在<code>CI/CD</code>的场景下，从代码提交合并到自动打包构建，会分好几个阶段，例如：<code>git push</code> -&gt; <code>代码规范检查</code> -&gt; <code>sonar 扫描</code> -&gt; <code>maven 打包</code> --&gt; <code>docker 打包镜像</code> -&gt; <code>docker push harbor</code>。在这里如果自动触发构建不做过多赘述（Jenkins内容，感兴趣的自行了解），这里只做<code>Dockerfile</code> 分阶段构建镜像的说明。</p>","autoDesc":true}')}}]);