"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6199],{6262:(e,i)=>{i.A=(e,i)=>{const s=e.__vccOpts||e;for(const[e,a]of i)s[e]=a;return s}},5829:(e,i,s)=>{s.r(i),s.d(i,{comp:()=>n,data:()=>t});var a=s(641);const l={},n=(0,s(6262).A)(l,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<p><strong>要求</strong></p><ul><li>使用 <code>java8</code> 作为基础镜像</li><li>将<code>spring boot</code>项目构建为<code>docker</code> 镜像</li><li>容器支持传递：<code>vmargs</code>、<code>args</code></li></ul><p><strong>场景描述</strong></p><blockquote><p>开发完成后，只需要手动打包为<code>jar</code>或者通过<code>jenkins</code> 进行编译打包为jar一次即可，即里面的项目配置通过外部配置进行覆盖，比如，在将<code>jar</code>打包为<code>docker</code> 镜像时，将应用本身的配置覆盖，程序员不需要关注各个环境的部署配置，只关注业务开发（开发环境）。</p></blockquote><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><div class="language-shel line-numbers-mode" data-highlighter="shiki" data-ext="shel" data-title="shel" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>├── demo</span></span>\n<span class="line"><span>│   ├── Dockerfile</span></span>\n<span class="line"><span>│   ├── app.jar</span></span>\n<span class="line"><span>│   └── config</span></span>\n<span class="line"><span>│       └── bootstrap.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一个<code>spring boot</code> 应用包：<code>app.jar</code></li><li>一个 覆盖配置文件：<code>config/bootstrap.yaml</code></li><li>一个<code>Dockerfile</code> 文件</li></ul><p><em>Note:</em></p><blockquote><p>Spring boot 的配置文件加载优先级：启动时传递的参数 &gt; 应用（即jar文件）同级config/properties或yaml &gt; 应用同级的配置：properties或yaml配置文件 &gt; jar内下classpath:properties或者yaml文件 &gt; Java代码中的配置</p></blockquote><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h2><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> openjdk:8u342-jre # 1 </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TZ=Asia/Shanghai #2</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /home/app   #3</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> app.jar app.jar    #4 </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> config config  #5</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; \\</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    echo $TZ &gt; /etc/timezone    #6</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">USER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> root   #7</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 8080 #8</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> java ${JAVA_OPTS} -jar app.jar --user.timezone=GMT+08  ${JAVA_CLI}   #9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Note：</em></p><ul><li><em>#1 基础镜像</em></li><li><em>#2 时区环境变量</em></li><li><em>#3 工作目录，容器启动后会创建该目录，下面的操作都将基于这个目录进行</em></li><li><em>#4 复制当前目录（基于Dockerfile)下的 app.jar 到容器，COPY source[宿主机目录/文件] dest[容器目录或文件]</em></li><li><em>#5 复制配置文件目录</em></li><li><em>#6 设置容器时区</em></li><li><em>#7设置用户</em></li><li><em>#8 往外暴露的端口</em></li><li><em>#9 设置容器启动时执行的命令</em><ul><li><code>JAVA_OPTS</code>，环境变量，容器启动时传<code>vmargs</code> 虚拟机参数，比如：<code>-Xms 128m -Xmx 256m</code></li><li><code>JAVA_CLI</code>,<code>arg</code> 系统参数，容器启动时传，即<code>main</code>方法接手的参数，例如：<code>--spring.profiles.active=test</code></li></ul></li></ul><h2 id="构建镜像-启动容器" tabindex="-1"><a class="header-anchor" href="#构建镜像-启动容器"><span>构建镜像&amp;启动容器</span></a></h2><p>构建镜像</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> app:v1.0.0-test</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Note：</em></p><ul><li><code>-t</code>， 表示需要为镜像打<code>tag</code>（版本号）- <code>v1.0.0-test</code></li><li><code>.</code> 表示使用当前目录下的Dockerfile文件进行构建镜像（当然也可以通过<code>-f [path]</code>指定其他目录下的Dockerfile <a href="https://www.runoob.com/docker/docker-build-command.html" target="_blank" rel="noopener noreferrer">参考</a>）</li></ul><p>启动容器</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JAVA_OPTS=-Xms</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 128m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 256m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JAVA_CLI=--spring.profiles.active=dev</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo:v1.0.0-test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li>https://docs.docker.com/reference/dockerfile/</li><li>https://www.runoob.com/docker/docker-build-command.html</li></ul>',22)]))}]]),t=JSON.parse('{"path":"/ops/docker/docker-file.html","title":"Dockerfile","lang":"zh-CN","frontmatter":{"title":"Dockerfile","date":"2024-11-13T00:00:00.000Z","editLink":false,"category":["运维"],"tag":["Docker","K8s"],"description":"要求 使用 java8 作为基础镜像 将spring boot项目构建为docker 镜像 容器支持传递：vmargs、args 场景描述 开发完成后，只需要手动打包为jar或者通过jenkins 进行编译打包为jar一次即可，即里面的项目配置通过外部配置进行覆盖，比如，在将jar打包为docker 镜像时，将应用本身的配置覆盖，程序员不需要关注各个环...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/ops/docker/docker-file.html"}],["meta",{"property":"og:site_name","content":"Monk"}],["meta",{"property":"og:title","content":"Dockerfile"}],["meta",{"property":"og:description","content":"要求 使用 java8 作为基础镜像 将spring boot项目构建为docker 镜像 容器支持传递：vmargs、args 场景描述 开发完成后，只需要手动打包为jar或者通过jenkins 进行编译打包为jar一次即可，即里面的项目配置通过外部配置进行覆盖，比如，在将jar打包为docker 镜像时，将应用本身的配置覆盖，程序员不需要关注各个环..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T04:10:46.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:tag","content":"K8s"}],["meta",{"property":"article:published_time","content":"2024-11-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T04:10:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-20T04:10:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeRongqin\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":2,"title":"Dockerfile","slug":"dockerfile","link":"#dockerfile","children":[]},{"level":2,"title":"构建镜像&启动容器","slug":"构建镜像-启动容器","link":"#构建镜像-启动容器","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1731505340000,"updatedTime":1732075846000,"contributors":[{"name":"rongqin.he","email":"2012465448@qq.com","commits":1}]},"readingTime":{"minutes":1.9,"words":569},"filePathRelative":"ops/docker/docker-file.md","localizedDate":"2024年11月13日","excerpt":"<p><strong>要求</strong></p>\\n<ul>\\n<li>使用 <code>java8</code> 作为基础镜像</li>\\n<li>将<code>spring boot</code>项目构建为<code>docker</code> 镜像</li>\\n<li>容器支持传递：<code>vmargs</code>、<code>args</code></li>\\n</ul>\\n<p><strong>场景描述</strong></p>\\n<blockquote>\\n<p>开发完成后，只需要手动打包为<code>jar</code>或者通过<code>jenkins</code> 进行编译打包为jar一次即可，即里面的项目配置通过外部配置进行覆盖，比如，在将<code>jar</code>打包为<code>docker</code> 镜像时，将应用本身的配置覆盖，程序员不需要关注各个环境的部署配置，只关注业务开发（开发环境）。</p>\\n</blockquote>","autoDesc":true}')}}]);